
<link href="https://fonts.googleapis.com/css2?family=Roboto:ital,wght@0,300;0,500;1,700&display=swap" rel="stylesheet">

<body class="has-background-light" style="min-height: 100vh;">
<div class="section p-none">
  <div class="section p-l-lg p-r-lg p-t-md p-b-md">
    <h1 style="font-weight: 300; font-size: 1rem;"><strong>Events</strong> updated&nbsp<span id="update-time-container">right now</span></h1>
  </div>
  <div class="section m-none p-l-lg p-r-lg p-t-sm">
    <div class="tile is-ancestor is-horizontal"
         style="overflow-x: scroll"
         id="calendar-tiles-container"></div>
  </div>
</div>
</body>

<script src="https://momentjs.com/downloads/moment.min.js"></script>
<script type="text/javascript">

class EventDateTime {
  constructor(eventDateTimeItem) {
    this.dateString = eventDateTimeItem['date'];
    this.dateTimeString = eventDateTimeItem['date_time'];
    this.timeZoneString = eventDateTimeItem['time_zone'];
  }

  date() {
    if (this.dateString !== undefined) return new Date(this.dateString);
    if (this.dateTimeString !== undefined) return new Date(this.dateTimeString);
    return undefined;
  }
}

class Creator {
  constructor(creatorItem) {
    this.displayName = creatorItem['display_name'];
    this.email = creatorItem['email'];
    this.id = creatorItem['id'];
  }
}

class Event {
  constructor(eventItem) {
    this.start = new EventDateTime(eventItem['start']);
    this.end = new EventDateTime(eventItem['end']);
    this.creator = new Creator(eventItem['creator']);
    this.htmlLink = eventItem['html_link'];
    this.status = eventItem['status'];
    this.summary = eventItem['summary'];
  }
}

class Calendar {
  constructor(calendarItem) {
    this.summary = calendarItem['summary'];
    this.backgroundColor = calendarItem['background_color'];
    this.foregroundColor = calendarItem['foreground_color'];
  }
}

class CalendarEvent {
  constructor(calendarEventItem) {
    this.calendar = new Calendar(calendarEventItem['calendar']);
    this.event = new Event(calendarEventItem['event']);
  }
}

String.prototype.truncate = function(n) {
  return this.substr(0, n - 1) + (this.length > n ? '&hellip;' : '');
}

function loadUpcomingEvents() {
  fetch('/calendar/events')
  .then(res => res.json())
  .then(json => {
    const calendarEvents = json.map((calendarEventItem) => (new CalendarEvent(calendarEventItem)));
    calendarEvents.sort((a, b) => (a.event.start.date() - b.event.start.date()));

    const container = document.querySelector('#calendar-tiles-container');
    container.innerHTML = '';

    var day = new Date();
    for (const [index, calendarEvent] of calendarEvents.entries()) {
      const calendarElement = document.createElement('div');
      const startDate = calendarEvent.event.start.date();

      if (day.getDate() !== startDate.getDate()) {
        const separatorElement = document.createElement('div');
        separatorElement.innerHTML = `
          <div class="m-r-sm tile has-background-white" style="width: 0.25rem; height: 100%;"></div>
        `;
        container.appendChild(separatorElement);
        day = startDate;
      }

      const startMoment = moment(startDate);
      const endMoment = moment(calendarEvent.event.end.date());
      const opacity = Math.max(0, 1 - (index / 6));
      calendarElement.innerHTML = `
        <div class="m-r-sm tile is-vertical has-background-white" style="opacity: ${opacity}; width: 12rem; height: 12rem;">
          <div style="height: 0.25rem; background-color: ${calendarEvent.calendar.backgroundColor};"></div>
          <div class="p-md">
            <h3 style="font-weight: 300; font-size: 1rem;">${calendarEvent.calendar.summary.truncate(20)}</h3>
            <h1 style="font-weight: 500; font-size: 1.25rem;">${calendarEvent.event.summary.truncate(16)}</h1>
            <h3 style="font-weight: 300; font-size: 1rem;"
                class="live-datetime m-b-lg" data-date="${startDate}">${startMoment.fromNow()}</h3>
            <h3 style="font-weight: 300; font-size: 1rem;">${startMoment.calendar()} until ${endMoment.format('LT')}</h3>
          </div>
        </div>
      `;
      container.appendChild(calendarElement);

      const updateTimeContainer = document.getElementById('update-time-container');
      updateTimeContainer.classList.add('live-datetime');
      updateTimeContainer.setAttribute('data-date', new Date());
      updateTimeContainer.innerHTML = moment(new Date()).fromNow();
    }
  })
  .catch((error) => {
    updateButton.classList.remove('is-loading');
  });
}

function updateRelativeDatetimes() {
  const elements = document.getElementsByClassName('live-datetime');
  for (let element of elements) {
    const date = new Date(element.dataset.date);
    element.innerHTML = moment(date).fromNow();
  }
}

loadUpcomingEvents();

setInterval(loadUpcomingEvents, 1000 * 60 * 10);
setInterval(updateRelativeDatetimes, 1000);
</script>
