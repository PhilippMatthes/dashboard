
<body class="has-background-light has-text-black" style="min-height: 100vh;">
<div class="section p-none">
  <div class="section p-l-lg p-r-lg p-t-sm p-b-sm" style="display: flex;">
    <h1><span id="update-clock-container" class="m-r-sm"></span><span id="update-day-night-container"></span></h1>
    <h1 style="font-weight: 400; font-size: 1rem; margin-left: auto; order: 2;">
      Events updated&nbsp<span id="update-time-container"></span>
    </h1>
  </div>
  <div class="section m-none p-l-none p-r-none p-t-sm p-b-sm" style="width: 100vw;">
    <div class="tile p-l-lg is-ancestor is-horizontal tile-container"
         style="overflow-x: scroll"
         id="calendar-tiles-container"></div>
  </div>
  <div class="section m-none p-l-none p-r-none p-t-sm" style="width: 100vw;">
    <div class="tile p-l-lg p-r-lg is-ancestor is-vertical"
         id="gmail-tiles-container"></div>
  </div>
</div>
</body>

<%= javascript_include_tag "suncalc.js" %>
<%= javascript_include_tag "moment.min.js" %>
<%= javascript_include_tag "config.js" %>

<script type="text/javascript">

class EventDateTime {
  constructor(eventDateTimeItem) {
    this.dateString = eventDateTimeItem['date'];
    this.dateTimeString = eventDateTimeItem['date_time'];
    this.timeZoneString = eventDateTimeItem['time_zone'];
  }

  date() {
    if (this.dateString !== undefined) return new Date(this.dateString);
    if (this.dateTimeString !== undefined) return new Date(this.dateTimeString);
    return undefined;
  }
}

class Creator {
  constructor(creatorItem) {
    this.displayName = creatorItem['display_name'];
    this.email = creatorItem['email'];
    this.id = creatorItem['id'];
  }
}

class Event {
  constructor(eventItem) {
    this.start = new EventDateTime(eventItem['start']);
    this.end = new EventDateTime(eventItem['end']);
    this.creator = new Creator(eventItem['creator']);
    this.htmlLink = eventItem['html_link'];
    this.status = eventItem['status'];
    this.summary = eventItem['summary'];
  }
}

class Calendar {
  constructor(calendarItem) {
    this.summary = calendarItem['summary'];
    this.backgroundColor = calendarItem['background_color'];
    this.foregroundColor = calendarItem['foreground_color'];
  }
}

class CalendarEvent {
  constructor(calendarEventItem) {
    this.calendar = new Calendar(calendarEventItem['calendar']);
    this.event = new Event(calendarEventItem['event']);
  }
}

String.prototype.truncate = function(n) {
  return this.substr(0, n - 1) + (this.length > n ? '&hellip;' : '');
}

function getSunTimes() {
  const now = new Date();
  return SunCalc.getTimes(now, config.location.latitude, config.location.longitude);
}

function isNight(times) {
  const now = new Date();
  return moment(now).isBefore(times.sunrise) || moment(times.sunset).isBefore(now);
}

function loadUpcomingEvents() {
  fetch('/calendar/events')
  .then(res => res.json())
  .then(json => {
    const calendarEvents = json.map((calendarEventItem) => (new CalendarEvent(calendarEventItem)));
    calendarEvents.sort((a, b) => (a.event.start.date() - b.event.start.date()));

    const container = document.querySelector('#calendar-tiles-container');
    container.innerHTML = '';

    var day = new Date();
    for (let [index, calendarEvent] of calendarEvents.entries()) {
      const calendarElement = document.createElement('div');
      const startDate = calendarEvent.event.start.date();

      const sunTimes = getSunTimes();
      const tileBackgroundColor = isNight(sunTimes) ? 'has-background-black' : 'has-background-white';
      if (day.getDate() !== startDate.getDate()) {
        const separatorElement = document.createElement('div');
        separatorElement.innerHTML = `
          <div class="m-r-sm m-l-sm tile"></div>
        `;
        container.appendChild(separatorElement);
        day = startDate;
      }
      const startMoment = moment(startDate);
      const endMoment = moment(calendarEvent.event.end.date());
      calendarElement.innerHTML = `
        <div class="m-r-sm m-l-sm m-b-sm m-t-sm tile is-vertical has-shadow ${tileBackgroundColor}"
             style="width: 12rem; height: 14rem;">
          <div style="height: 0.25rem; background-color: ${calendarEvent.calendar.backgroundColor};"></div>
          <div class="p-md">
            <h3 style="font-weight: 400; font-size: 1rem;">${calendarEvent.calendar.summary.truncate(20)}</h3>
            <h1 style="font-weight: 700; font-size: 1.25rem; height: 4rem;">${calendarEvent.event.summary.truncate(24)}</h1>
            <h3 style="font-weight: 400; font-size: 1rem;"
                class="live-datetime m-b-sm" data-date="${startDate}">${startMoment.fromNow()}</h3>
            <h3 style="font-weight: 400; font-size: 1rem;">
              ${startMoment.calendar(config.momentCalendarFormat)} until ${endMoment.format('HH:mm')}
            </h3>
          </div>
        </div>
      `;
      container.appendChild(calendarElement);

      const updateTimeContainer = document.getElementById('update-time-container');
      updateTimeContainer.classList.add('live-datetime');
      updateTimeContainer.setAttribute('data-date', new Date());
      updateTimeContainer.innerHTML = moment(new Date()).fromNow();
    }
  });
}

function updateRelativeDatetimes() {
  const elements = document.getElementsByClassName('live-datetime');
  for (let element of elements) {
    const date = new Date(element.dataset.date);
    element.innerHTML = moment(date).fromNow();
  }
}

class DayNightColor {
  constructor(dayCSSName, nightCSSName) {
    this.dayCSSName = dayCSSName;
    this.nightCSSName = nightCSSName;
  }

  switchElementsToNight() {
    for (let element of document.querySelectorAll(`.${this.dayCSSName}`)) {
      element.classList.remove(this.dayCSSName);
      element.classList.add(this.nightCSSName);
    }
  }

  switchElementsToDay() {
    for (let element of document.querySelectorAll(`.${this.nightCSSName}`)) {
      element.classList.remove(this.nightCSSName);
      element.classList.add(this.dayCSSName);
    }
  }
}

const colors = [
  new DayNightColor('has-background-white', 'has-background-black'),
  new DayNightColor('has-background-light', 'has-background-dark'),
  new DayNightColor('has-text-black', 'has-text-white'),
  new DayNightColor('has-text-dark', 'has-text-light'),
];

let currentDayNightState;
function updateDayNightState() {
  const sunTimes = getSunTimes();
  if (isNight(sunTimes)) {
    if (currentDayNightState === 'night') return;
    for (let color of colors) {
      color.switchElementsToNight();
    }
    currentDayNightState = 'night';
    const updateDayNightContainer = document.getElementById('update-day-night-container');
    updateDayNightContainer.innerHTML = `☀️⬆️ ${moment(sunTimes.sunrise).format('HH:mm')}`;
  } else {
    if (currentDayNightState === 'day') return;
    for (let color of colors) {
      color.switchElementsToDay();
    }
    currentDayNightState = 'day';
    const updateDayNightContainer = document.getElementById('update-day-night-container');
    updateDayNightContainer.innerHTML = `☀️⬇️ ${moment(sunTimes.sunset).format('HH:mm')}`;
  }
}

function updateClock() {
  const container = document.getElementById('update-clock-container');
  container.innerHTML = `${moment().format('HH:mm')}`;
}

let loadedMessages = {};
function loadMessages() {
  fetch('/gmail/messages')
  .then(res => res.json())
  .then(json => {
    const messagesContainer = document.getElementById('gmail-tiles-container');
    const messages = json['messages'];

    // If there are no messages, remove all loaded messages
    if (messages === undefined) {
      for (let [id, message] of Object.entries(loadedMessages)) {
        if (message === undefined) continue;
        loadedMessages[id] = undefined;
        document.getElementById(`message-${id}`).remove();
      }
      return;
    }

    // Remove all loaded messages, which have been read
    for (let [id, message] of Object.entries(loadedMessages)) {
      if (message === undefined) continue;
      if (!messages.map((m) => (m.id)).includes(id)) {
        console.log(`Message ${message.id} was read. Removing from cached messages...`);
        loadedMessages[id] = undefined;
        document.getElementById(`message-${id}`).remove();
      }
    }

    for (let message of messages) {
      if (loadedMessages[message.id] !== undefined) continue;
      loadedMessages[message.id] = message;

      console.log(`Loading Message ${message.id}...`);

      fetch(`/gmail/message?id=${message.id}`)
      .then(res => res.json())
      .then(json => {
        const snippet = json['snippet'];
        const date = new Date(parseInt(json['internalDate']));
        let subject, from, to;
        for (let header of json['payload']['headers']) {
          const name = header['name'];
          const value = header['value'];
          if (name === 'Subject') subject = value;
          if (name === 'From') from = value;
          if (name === 'To') to = value;
        }

        const sunTimes = getSunTimes();
        const tileBackgroundColor = isNight(sunTimes) ? 'has-background-black' : 'has-background-white';

        const messageElement = document.createElement('div');
        messageElement.innerHTML = `
        <div id="message-${message.id}" class="m-r-sm m-l-sm m-b-md m-t-md tile is-vertical has-shadow ${tileBackgroundColor}">
          <div class="has-background-grey-light" style="height: 0.25rem;"></div>
          <div class="p-md">
            <h3 style="font-weight: 400; font-size: 1rem;">${moment(date).calendar(config.momentCalendarFormat)} - From ${from} to ${to}</h3>
            <h1 style="font-weight: 700; font-size: 1.25rem;">${subject}</h1>
            <h3 style="font-weight: 400; font-size: 1rem;">${snippet}</h3>
          </div>
        </div>
        `;
        messagesContainer.appendChild(messageElement);
      });
    }
  });
}

loadUpcomingEvents();
updateDayNightState();
updateClock();
loadMessages()

setInterval(loadUpcomingEvents, 1000 * 60 * 10);
setInterval(updateRelativeDatetimes, 1000);
setInterval(updateDayNightState, 1000 * 60);
setInterval(updateClock, 1000 * 30);
setInterval(loadMessages, 1000 * 60 * 5);
</script>
